{"version":3,"file":"dag-map.umd.js","sources":["dag-map.ts"],"sourcesContent":["export interface Callback<T> {\n  (key: string, value: T | undefined): void;\n}\n\nexport type MaybeStringOrArray = string | string[] | undefined;\n\n/**\n * A topologically ordered map of key/value pairs with a simple API for adding constraints.\n *\n * Edges can forward reference keys that have not been added yet (the forward reference will\n * map the key to undefined).\n */\nexport default class DAG<T> {\n  private _vertices = new Vertices<T>();\n\n  /**\n   * Adds a key/value pair with dependencies on other key/value pairs.\n   *\n   * @public\n   * @param key    The key of the vertex to be added.\n   * @param value  The value of that vertex.\n   * @param before A key or array of keys of the vertices that must\n   *               be visited before this vertex.\n   * @param after  An string or array of strings with the keys of the\n   *               vertices that must be after this vertex is visited.\n   */\n  public add(\n    key: string,\n    value: T | undefined,\n    before?: MaybeStringOrArray,\n    after?: MaybeStringOrArray\n  ) {\n    if (!key) throw new Error(\"argument `key` is required\");\n    let vertices = this._vertices;\n    let v = vertices.add(key);\n    v.val = value;\n    if (before) {\n      if (typeof before === \"string\") {\n        vertices.addEdge(v, vertices.add(before));\n      } else {\n        for (let i = 0; i < before.length; i++) {\n          vertices.addEdge(v, vertices.add(before[i]));\n        }\n      }\n    }\n    if (after) {\n      if (typeof after === \"string\") {\n        vertices.addEdge(vertices.add(after), v);\n      } else {\n        for (let i = 0; i < after.length; i++) {\n          vertices.addEdge(vertices.add(after[i]), v);\n        }\n      }\n    }\n  }\n\n  /**\n   * Visits key/value pairs in topological order.\n   *\n   * @public\n   * @param callback The function to be invoked with each key/value.\n   */\n  public each(callback: Callback<T>) {\n    this._vertices.walk(callback);\n  }\n}\n\n/** @private */\nclass Vertices<T> {\n  [index: number]: Vertex<T>;\n  length = 0;\n\n  private stack: IntStack = new IntStack();\n  private path: IntStack = new IntStack();\n  private result: IntStack = new IntStack();\n\n  public add(key: string): Vertex<T> {\n    if (!key) throw new Error(\"missing key\");\n    let l = this.length | 0;\n    let vertex: Vertex<T>;\n    for (let i = 0; i < l; i++) {\n      vertex = this[i];\n      if (vertex.key === key) return vertex;\n    }\n    this.length = l + 1;\n    return (this[l] = {\n      idx: l,\n      key: key,\n      val: undefined,\n      out: false,\n      flag: false,\n      length: 0\n    });\n  }\n\n  public addEdge(v: Vertex<T>, w: Vertex<T>): void {\n    this.check(v, w.key);\n    let l = w.length | 0;\n    for (let i = 0; i < l; i++) {\n      if (w[i] === v.idx) return;\n    }\n    w.length = l + 1;\n    w[l] = v.idx;\n    v.out = true;\n  }\n\n  public walk(cb: Callback<T>): void {\n    this.reset();\n    for (let i = 0; i < this.length; i++) {\n      let vertex = this[i];\n      if (vertex.out) continue;\n      this.visit(vertex, \"\");\n    }\n    this.each(this.result, cb);\n  }\n\n  private check(v: Vertex<T>, w: string): void {\n    if (v.key === w) {\n      throw new Error(\"cycle detected: \" + w + \" <- \" + w);\n    }\n    // quick check\n    if (v.length === 0) return;\n    // shallow check\n    for (let i = 0; i < v.length; i++) {\n      let key = this[v[i]].key;\n      if (key === w) {\n        throw new Error(\"cycle detected: \" + w + \" <- \" + v.key + \" <- \" + w);\n      }\n    }\n    // deep check\n    this.reset();\n    this.visit(v, w);\n    if (this.path.length > 0) {\n      let msg = \"cycle detected: \" + w;\n      this.each(this.path, key => {\n        msg += \" <- \" + key;\n      });\n      throw new Error(msg);\n    }\n  }\n\n  private reset(): void {\n    this.stack.length = 0;\n    this.path.length = 0;\n    this.result.length = 0;\n    for (let i = 0, l = this.length; i < l; i++) {\n      this[i].flag = false;\n    }\n  }\n\n  private visit(start: Vertex<T>, search: string): void {\n    let { stack, path, result } = this;\n    stack.push(start.idx);\n    while (stack.length) {\n      let index = stack.pop() | 0;\n      if (index >= 0) {\n        // enter\n        let vertex = this[index];\n        if (vertex.flag) continue;\n        vertex.flag = true;\n        path.push(index);\n        if (search === vertex.key) break;\n        // push exit\n        stack.push(~index);\n        this.pushIncoming(vertex);\n      } else {\n        // exit\n        path.pop();\n        result.push(~index);\n      }\n    }\n  }\n\n  private pushIncoming(incomming: ArrayLike<number>): void {\n    let { stack } = this;\n    for (let i = incomming.length - 1; i >= 0; i--) {\n      let index = incomming[i];\n      if (!this[index].flag) {\n        stack.push(index);\n      }\n    }\n  }\n\n  private each(indices: IntStack, cb: Callback<T>): void {\n    for (let i = 0, l = indices.length; i < l; i++) {\n      let vertex = this[indices[i]];\n      cb(vertex.key, vertex.val);\n    }\n  }\n}\n\n/** @private */\ninterface Vertex<T> {\n  idx: number;\n  key: string;\n  val: T | undefined;\n  out: boolean;\n  flag: boolean;\n  [index: number]: number;\n  length: number;\n}\n\n/** @private */\nclass IntStack {\n  [index: number]: number;\n\n  public length = 0;\n\n  push(n: number) {\n    this[this.length++] = n | 0;\n  }\n\n  pop() {\n    return this[--this.length] | 0;\n  }\n}\n"],"names":["let","i"],"mappings":"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"}